// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.1
// source: payment.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentRPCClient is the client API for PaymentRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentRPCClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*PaymentID, error)
	MarkPaid(ctx context.Context, in *PaymentID, opts ...grpc.CallOption) (*Nothing, error)
}

type paymentRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentRPCClient(cc grpc.ClientConnInterface) PaymentRPCClient {
	return &paymentRPCClient{cc}
}

func (c *paymentRPCClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*PaymentID, error) {
	out := new(PaymentID)
	err := c.cc.Invoke(ctx, "/payment.PaymentRPC/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentRPCClient) MarkPaid(ctx context.Context, in *PaymentID, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/payment.PaymentRPC/MarkPaid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentRPCServer is the server API for PaymentRPC service.
// All implementations must embed UnimplementedPaymentRPCServer
// for forward compatibility
type PaymentRPCServer interface {
	Create(context.Context, *CreateRequest) (*PaymentID, error)
	MarkPaid(context.Context, *PaymentID) (*Nothing, error)
	mustEmbedUnimplementedPaymentRPCServer()
}

// UnimplementedPaymentRPCServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentRPCServer struct {
}

func (UnimplementedPaymentRPCServer) Create(context.Context, *CreateRequest) (*PaymentID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPaymentRPCServer) MarkPaid(context.Context, *PaymentID) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkPaid not implemented")
}
func (UnimplementedPaymentRPCServer) mustEmbedUnimplementedPaymentRPCServer() {}

// UnsafePaymentRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentRPCServer will
// result in compilation errors.
type UnsafePaymentRPCServer interface {
	mustEmbedUnimplementedPaymentRPCServer()
}

func RegisterPaymentRPCServer(s grpc.ServiceRegistrar, srv PaymentRPCServer) {
	s.RegisterService(&PaymentRPC_ServiceDesc, srv)
}

func _PaymentRPC_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentRPCServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentRPC/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentRPCServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentRPC_MarkPaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentRPCServer).MarkPaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentRPC/MarkPaid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentRPCServer).MarkPaid(ctx, req.(*PaymentID))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentRPC_ServiceDesc is the grpc.ServiceDesc for PaymentRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.PaymentRPC",
	HandlerType: (*PaymentRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PaymentRPC_Create_Handler,
		},
		{
			MethodName: "MarkPaid",
			Handler:    _PaymentRPC_MarkPaid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment.proto",
}
