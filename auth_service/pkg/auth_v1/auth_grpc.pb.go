// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.1
// source: movie.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SessionRPCClient is the clients API for SessionRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionRPCClient interface {
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	DestroySession(ctx context.Context, in *DestroySessionRequest, opts ...grpc.CallOption) (*Nothing, error)
	Session(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error)
}

type sessionRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionRPCClient(cc grpc.ClientConnInterface) SessionRPCClient {
	return &sessionRPCClient{cc}
}

func (c *sessionRPCClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, "/auth.SessionRPC/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionRPCClient) DestroySession(ctx context.Context, in *DestroySessionRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/auth.SessionRPC/DestroySession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionRPCClient) Session(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error) {
	out := new(GetSessionResponse)
	err := c.cc.Invoke(ctx, "/auth.SessionRPC/Session", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionRPCServer is the server API for SessionRPC service.
// All implementations must embed UnimplementedSessionRPCServer
// for forward compatibility
type SessionRPCServer interface {
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	DestroySession(context.Context, *DestroySessionRequest) (*Nothing, error)
	Session(context.Context, *GetSessionRequest) (*GetSessionResponse, error)
	mustEmbedUnimplementedSessionRPCServer()
}

// UnimplementedSessionRPCServer must be embedded to have forward compatible implementations.
type UnimplementedSessionRPCServer struct {
}

func (UnimplementedSessionRPCServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedSessionRPCServer) DestroySession(context.Context, *DestroySessionRequest) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroySession not implemented")
}
func (UnimplementedSessionRPCServer) Session(context.Context, *GetSessionRequest) (*GetSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Session not implemented")
}
func (UnimplementedSessionRPCServer) mustEmbedUnimplementedSessionRPCServer() {}

// UnsafeSessionRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionRPCServer will
// result in compilation errors.
type UnsafeSessionRPCServer interface {
	mustEmbedUnimplementedSessionRPCServer()
}

func RegisterSessionRPCServer(s grpc.ServiceRegistrar, srv SessionRPCServer) {
	s.RegisterService(&SessionRPC_ServiceDesc, srv)
}

func _SessionRPC_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionRPCServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.SessionRPC/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionRPCServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionRPC_DestroySession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroySessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionRPCServer).DestroySession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.SessionRPC/DestroySession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionRPCServer).DestroySession(ctx, req.(*DestroySessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionRPC_Session_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionRPCServer).Session(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.SessionRPC/Session",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionRPCServer).Session(ctx, req.(*GetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionRPC_ServiceDesc is the grpc.ServiceDesc for SessionRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.SessionRPC",
	HandlerType: (*SessionRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _SessionRPC_CreateSession_Handler,
		},
		{
			MethodName: "DestroySession",
			Handler:    _SessionRPC_DestroySession_Handler,
		},
		{
			MethodName: "Session",
			Handler:    _SessionRPC_Session_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie.proto",
}
