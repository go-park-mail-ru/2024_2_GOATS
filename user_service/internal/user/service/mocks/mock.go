// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	dto "github.com/go-park-mail-ru/2024_2_GOATS/user_service/internal/user/repository/dto"
	dto0 "github.com/go-park-mail-ru/2024_2_GOATS/user_service/internal/user/service/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepoInterface is a mock of UserRepoInterface interface.
type MockUserRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoInterfaceMockRecorder
}

// MockUserRepoInterfaceMockRecorder is the mock recorder for MockUserRepoInterface.
type MockUserRepoInterfaceMockRecorder struct {
	mock *MockUserRepoInterface
}

// NewMockUserRepoInterface creates a new mock instance.
func NewMockUserRepoInterface(ctrl *gomock.Controller) *MockUserRepoInterface {
	mock := &MockUserRepoInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepoInterface) EXPECT() *MockUserRepoInterfaceMockRecorder {
	return m.recorder
}

// CheckFavorite mocks base method.
func (m *MockUserRepoInterface) CheckFavorite(ctx context.Context, favData *dto.RepoFavorite) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFavorite", ctx, favData)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckFavorite indicates an expected call of CheckFavorite.
func (mr *MockUserRepoInterfaceMockRecorder) CheckFavorite(ctx, favData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFavorite", reflect.TypeOf((*MockUserRepoInterface)(nil).CheckFavorite), ctx, favData)
}

// CreateSubscription mocks base method.
func (m *MockUserRepoInterface) CreateSubscription(ctx context.Context, subData *dto.RepoCreateSubscriptionData) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", ctx, subData)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockUserRepoInterfaceMockRecorder) CreateSubscription(ctx, subData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockUserRepoInterface)(nil).CreateSubscription), ctx, subData)
}

// CreateUser mocks base method.
func (m *MockUserRepoInterface) CreateUser(ctx context.Context, registerData *dto.RepoCreateData) (*dto0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, registerData)
	ret0, _ := ret[0].(*dto0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoInterfaceMockRecorder) CreateUser(ctx, registerData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepoInterface)(nil).CreateUser), ctx, registerData)
}

// GetFavorites mocks base method.
func (m *MockUserRepoInterface) GetFavorites(ctx context.Context, usrID uint64) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavorites", ctx, usrID)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavorites indicates an expected call of GetFavorites.
func (mr *MockUserRepoInterfaceMockRecorder) GetFavorites(ctx, usrID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavorites", reflect.TypeOf((*MockUserRepoInterface)(nil).GetFavorites), ctx, usrID)
}

// ResetFavorite mocks base method.
func (m *MockUserRepoInterface) ResetFavorite(ctx context.Context, favData *dto.RepoFavorite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetFavorite", ctx, favData)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetFavorite indicates an expected call of ResetFavorite.
func (mr *MockUserRepoInterfaceMockRecorder) ResetFavorite(ctx, favData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetFavorite", reflect.TypeOf((*MockUserRepoInterface)(nil).ResetFavorite), ctx, favData)
}

// SaveUserAvatar mocks base method.
func (m *MockUserRepoInterface) SaveUserAvatar(ctx context.Context, avatarName string, file []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserAvatar", ctx, avatarName, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUserAvatar indicates an expected call of SaveUserAvatar.
func (mr *MockUserRepoInterfaceMockRecorder) SaveUserAvatar(ctx, avatarName, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserAvatar", reflect.TypeOf((*MockUserRepoInterface)(nil).SaveUserAvatar), ctx, avatarName, file)
}

// SetFavorite mocks base method.
func (m *MockUserRepoInterface) SetFavorite(ctx context.Context, favData *dto.RepoFavorite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFavorite", ctx, favData)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFavorite indicates an expected call of SetFavorite.
func (mr *MockUserRepoInterfaceMockRecorder) SetFavorite(ctx, favData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFavorite", reflect.TypeOf((*MockUserRepoInterface)(nil).SetFavorite), ctx, favData)
}

// UpdatePassword mocks base method.
func (m *MockUserRepoInterface) UpdatePassword(ctx context.Context, usrID uint64, pass string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, usrID, pass)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUserRepoInterfaceMockRecorder) UpdatePassword(ctx, usrID, pass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserRepoInterface)(nil).UpdatePassword), ctx, usrID, pass)
}

// UpdateProfileData mocks base method.
func (m *MockUserRepoInterface) UpdateProfileData(ctx context.Context, profileData *dto.RepoUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfileData", ctx, profileData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfileData indicates an expected call of UpdateProfileData.
func (mr *MockUserRepoInterfaceMockRecorder) UpdateProfileData(ctx, profileData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfileData", reflect.TypeOf((*MockUserRepoInterface)(nil).UpdateProfileData), ctx, profileData)
}

// UpdateSubscribtionStatus mocks base method.
func (m *MockUserRepoInterface) UpdateSubscribtionStatus(ctx context.Context, subID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscribtionStatus", ctx, subID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubscribtionStatus indicates an expected call of UpdateSubscribtionStatus.
func (mr *MockUserRepoInterfaceMockRecorder) UpdateSubscribtionStatus(ctx, subID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscribtionStatus", reflect.TypeOf((*MockUserRepoInterface)(nil).UpdateSubscribtionStatus), ctx, subID)
}

// UserByEmail mocks base method.
func (m *MockUserRepoInterface) UserByEmail(ctx context.Context, email string) (*dto0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByEmail", ctx, email)
	ret0, _ := ret[0].(*dto0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByEmail indicates an expected call of UserByEmail.
func (mr *MockUserRepoInterfaceMockRecorder) UserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByEmail", reflect.TypeOf((*MockUserRepoInterface)(nil).UserByEmail), ctx, email)
}

// UserByID mocks base method.
func (m *MockUserRepoInterface) UserByID(ctx context.Context, userID uint64) (*dto0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByID", ctx, userID)
	ret0, _ := ret[0].(*dto0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByID indicates an expected call of UserByID.
func (mr *MockUserRepoInterfaceMockRecorder) UserByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByID", reflect.TypeOf((*MockUserRepoInterface)(nil).UserByID), ctx, userID)
}
