// Code generated by MockGen. DO NOT EDIT.
// Source: delivery.go
//
// Generated by this command:
//
//	mockgen -source=delivery.go -destination=mocks/mock.go
//

// Package mock_delivery is a generated GoMock package.
package mock_delivery

import (
	context "context"
	reflect "reflect"

	errors "github.com/go-park-mail-ru/2024_2_GOATS/internal/app/errors"
	models "github.com/go-park-mail-ru/2024_2_GOATS/internal/app/models"
	gomock "go.uber.org/mock/gomock"
)

// MockMovieServiceInterface is a mock of MovieServiceInterface interface.
type MockMovieServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMovieServiceInterfaceMockRecorder
}

// MockMovieServiceInterfaceMockRecorder is the mock recorder for MockMovieServiceInterface.
type MockMovieServiceInterfaceMockRecorder struct {
	mock *MockMovieServiceInterface
}

// NewMockMovieServiceInterface creates a new mock instance.
func NewMockMovieServiceInterface(ctrl *gomock.Controller) *MockMovieServiceInterface {
	mock := &MockMovieServiceInterface{ctrl: ctrl}
	mock.recorder = &MockMovieServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieServiceInterface) EXPECT() *MockMovieServiceInterfaceMockRecorder {
	return m.recorder
}

// AddOrUpdateRating mocks base method.
func (m *MockMovieServiceInterface) AddOrUpdateRating(ctx context.Context, movieID, rating int32) *errors.ServiceError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrUpdateRating", ctx, movieID, rating)
	ret0, _ := ret[0].(*errors.ServiceError)
	return ret0
}

// AddOrUpdateRating indicates an expected call of AddOrUpdateRating.
func (mr *MockMovieServiceInterfaceMockRecorder) AddOrUpdateRating(ctx, movieID, rating any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateRating", reflect.TypeOf((*MockMovieServiceInterface)(nil).AddOrUpdateRating), ctx, movieID, rating)
}

// DeleteRating mocks base method.
func (m *MockMovieServiceInterface) DeleteRating(ctx context.Context, movieID int32) *errors.ServiceError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRating", ctx, movieID)
	ret0, _ := ret[0].(*errors.ServiceError)
	return ret0
}

// DeleteRating indicates an expected call of DeleteRating.
func (mr *MockMovieServiceInterfaceMockRecorder) DeleteRating(ctx, movieID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRating", reflect.TypeOf((*MockMovieServiceInterface)(nil).DeleteRating), ctx, movieID)
}

// GetActor mocks base method.
func (m *MockMovieServiceInterface) GetActor(ctx context.Context, actorID int) (*models.ActorInfo, *errors.ServiceError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActor", ctx, actorID)
	ret0, _ := ret[0].(*models.ActorInfo)
	ret1, _ := ret[1].(*errors.ServiceError)
	return ret0, ret1
}

// GetActor indicates an expected call of GetActor.
func (mr *MockMovieServiceInterfaceMockRecorder) GetActor(ctx, actorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActor", reflect.TypeOf((*MockMovieServiceInterface)(nil).GetActor), ctx, actorID)
}

// GetCollection mocks base method.
func (m *MockMovieServiceInterface) GetCollection(ctx context.Context, filter string) (*models.CollectionsRespData, *errors.ServiceError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollection", ctx, filter)
	ret0, _ := ret[0].(*models.CollectionsRespData)
	ret1, _ := ret[1].(*errors.ServiceError)
	return ret0, ret1
}

// GetCollection indicates an expected call of GetCollection.
func (mr *MockMovieServiceInterfaceMockRecorder) GetCollection(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollection", reflect.TypeOf((*MockMovieServiceInterface)(nil).GetCollection), ctx, filter)
}

// GetMovie mocks base method.
func (m *MockMovieServiceInterface) GetMovie(ctx context.Context, mvID int) (*models.MovieInfo, *errors.ServiceError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovie", ctx, mvID)
	ret0, _ := ret[0].(*models.MovieInfo)
	ret1, _ := ret[1].(*errors.ServiceError)
	return ret0, ret1
}

// GetMovie indicates an expected call of GetMovie.
func (mr *MockMovieServiceInterfaceMockRecorder) GetMovie(ctx, mvID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovie", reflect.TypeOf((*MockMovieServiceInterface)(nil).GetMovie), ctx, mvID)
}

// GetUserRating mocks base method.
func (m *MockMovieServiceInterface) GetUserRating(ctx context.Context, movieID int32) (int32, *errors.ServiceError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRating", ctx, movieID)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(*errors.ServiceError)
	return ret0, ret1
}

// GetUserRating indicates an expected call of GetUserRating.
func (mr *MockMovieServiceInterfaceMockRecorder) GetUserRating(ctx, movieID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRating", reflect.TypeOf((*MockMovieServiceInterface)(nil).GetUserRating), ctx, movieID)
}

// SearchActors mocks base method.
func (m *MockMovieServiceInterface) SearchActors(ctx context.Context, query string) ([]models.ActorInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchActors", ctx, query)
	ret0, _ := ret[0].([]models.ActorInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchActors indicates an expected call of SearchActors.
func (mr *MockMovieServiceInterfaceMockRecorder) SearchActors(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchActors", reflect.TypeOf((*MockMovieServiceInterface)(nil).SearchActors), ctx, query)
}

// SearchMovies mocks base method.
func (m *MockMovieServiceInterface) SearchMovies(ctx context.Context, query string) ([]models.MovieInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMovies", ctx, query)
	ret0, _ := ret[0].([]models.MovieInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMovies indicates an expected call of SearchMovies.
func (mr *MockMovieServiceInterfaceMockRecorder) SearchMovies(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMovies", reflect.TypeOf((*MockMovieServiceInterface)(nil).SearchMovies), ctx, query)
}
