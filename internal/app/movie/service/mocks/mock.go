// Code generated by MockGen. DO NOT EDIT.
// Source: movie.go

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2024_2_GOATS/internal/app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockMovieClientInterface is a mock of MovieClientInterface interface.
type MockMovieClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMovieClientInterfaceMockRecorder
}

// MockMovieClientInterfaceMockRecorder is the mock recorder for MockMovieClientInterface.
type MockMovieClientInterfaceMockRecorder struct {
	mock *MockMovieClientInterface
}

// NewMockMovieClientInterface creates a new mock instance.
func NewMockMovieClientInterface(ctrl *gomock.Controller) *MockMovieClientInterface {
	mock := &MockMovieClientInterface{ctrl: ctrl}
	mock.recorder = &MockMovieClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieClientInterface) EXPECT() *MockMovieClientInterfaceMockRecorder {
	return m.recorder
}

// AddOrUpdateRating mocks base method.
func (m *MockMovieClientInterface) AddOrUpdateRating(ctx context.Context, movieID, userID, rating int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrUpdateRating", ctx, movieID, userID, rating)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrUpdateRating indicates an expected call of AddOrUpdateRating.
func (mr *MockMovieClientInterfaceMockRecorder) AddOrUpdateRating(ctx, movieID, userID, rating interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateRating", reflect.TypeOf((*MockMovieClientInterface)(nil).AddOrUpdateRating), ctx, movieID, userID, rating)
}

// DeleteUserRating mocks base method.
func (m *MockMovieClientInterface) DeleteUserRating(ctx context.Context, movieID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserRating", ctx, movieID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserRating indicates an expected call of DeleteUserRating.
func (mr *MockMovieClientInterfaceMockRecorder) DeleteUserRating(ctx, movieID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRating", reflect.TypeOf((*MockMovieClientInterface)(nil).DeleteUserRating), ctx, movieID, userID)
}

// GetActor mocks base method.
func (m *MockMovieClientInterface) GetActor(ctx context.Context, actorID int) (*models.ActorInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActor", ctx, actorID)
	ret0, _ := ret[0].(*models.ActorInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActor indicates an expected call of GetActor.
func (mr *MockMovieClientInterfaceMockRecorder) GetActor(ctx, actorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActor", reflect.TypeOf((*MockMovieClientInterface)(nil).GetActor), ctx, actorID)
}

// GetCollection mocks base method.
func (m *MockMovieClientInterface) GetCollection(ctx context.Context, filter string) ([]models.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollection", ctx, filter)
	ret0, _ := ret[0].([]models.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollection indicates an expected call of GetCollection.
func (mr *MockMovieClientInterfaceMockRecorder) GetCollection(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollection", reflect.TypeOf((*MockMovieClientInterface)(nil).GetCollection), ctx, filter)
}

// GetFavorites mocks base method.
func (m *MockMovieClientInterface) GetFavorites(ctx context.Context, mvIDs []uint64) ([]models.MovieShortInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavorites", ctx, mvIDs)
	ret0, _ := ret[0].([]models.MovieShortInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavorites indicates an expected call of GetFavorites.
func (mr *MockMovieClientInterfaceMockRecorder) GetFavorites(ctx, mvIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavorites", reflect.TypeOf((*MockMovieClientInterface)(nil).GetFavorites), ctx, mvIDs)
}

// GetMovie mocks base method.
func (m *MockMovieClientInterface) GetMovie(ctx context.Context, mvID int) (*models.MovieInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovie", ctx, mvID)
	ret0, _ := ret[0].(*models.MovieInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovie indicates an expected call of GetMovie.
func (mr *MockMovieClientInterfaceMockRecorder) GetMovie(ctx, mvID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovie", reflect.TypeOf((*MockMovieClientInterface)(nil).GetMovie), ctx, mvID)
}

// GetUserRating mocks base method.
func (m *MockMovieClientInterface) GetUserRating(ctx context.Context, movieID, userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRating", ctx, movieID, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRating indicates an expected call of GetUserRating.
func (mr *MockMovieClientInterfaceMockRecorder) GetUserRating(ctx, movieID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRating", reflect.TypeOf((*MockMovieClientInterface)(nil).GetUserRating), ctx, movieID, userID)
}

// SearchActors mocks base method.
func (m *MockMovieClientInterface) SearchActors(ctx context.Context, query string) ([]models.ActorInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchActors", ctx, query)
	ret0, _ := ret[0].([]models.ActorInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchActors indicates an expected call of SearchActors.
func (mr *MockMovieClientInterfaceMockRecorder) SearchActors(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchActors", reflect.TypeOf((*MockMovieClientInterface)(nil).SearchActors), ctx, query)
}

// SearchMovies mocks base method.
func (m *MockMovieClientInterface) SearchMovies(ctx context.Context, query string) ([]models.MovieInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMovies", ctx, query)
	ret0, _ := ret[0].([]models.MovieInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMovies indicates an expected call of SearchMovies.
func (mr *MockMovieClientInterfaceMockRecorder) SearchMovies(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMovies", reflect.TypeOf((*MockMovieClientInterface)(nil).SearchMovies), ctx, query)
}
