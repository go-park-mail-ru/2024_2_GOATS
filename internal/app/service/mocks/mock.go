// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	errors "github.com/go-park-mail-ru/2024_2_GOATS/internal/app/errors"
	models "github.com/go-park-mail-ru/2024_2_GOATS/internal/app/models"
	auth "github.com/go-park-mail-ru/2024_2_GOATS/internal/app/models/auth"
	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetCollection mocks base method.
func (m *MockRepositoryInterface) GetCollection(ctx context.Context) ([]models.Collection, *errors.ErrorObj, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollection", ctx)
	ret0, _ := ret[0].([]models.Collection)
	ret1, _ := ret[1].(*errors.ErrorObj)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// GetCollection indicates an expected call of GetCollection.
func (mr *MockRepositoryInterfaceMockRecorder) GetCollection(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollection", reflect.TypeOf((*MockRepositoryInterface)(nil).GetCollection), ctx)
}

// Login mocks base method.
func (m *MockRepositoryInterface) Login(ctx context.Context, loginData *auth.LoginData) ([]*auth.CookieData, *errors.ErrorObj, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, loginData)
	ret0, _ := ret[0].([]*auth.CookieData)
	ret1, _ := ret[1].(*errors.ErrorObj)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockRepositoryInterfaceMockRecorder) Login(ctx, loginData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockRepositoryInterface)(nil).Login), ctx, loginData)
}

// Logout mocks base method.
func (m *MockRepositoryInterface) Logout(ctx context.Context, cookie string) (*auth.CookieData, *errors.ErrorObj, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, cookie)
	ret0, _ := ret[0].(*auth.CookieData)
	ret1, _ := ret[1].(*errors.ErrorObj)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// Logout indicates an expected call of Logout.
func (mr *MockRepositoryInterfaceMockRecorder) Logout(ctx, cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockRepositoryInterface)(nil).Logout), ctx, cookie)
}

// Register mocks base method.
func (m *MockRepositoryInterface) Register(ctx context.Context, registerData *auth.RegisterData) (*auth.CookieData, *errors.ErrorObj, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, registerData)
	ret0, _ := ret[0].(*auth.CookieData)
	ret1, _ := ret[1].(*errors.ErrorObj)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// Register indicates an expected call of Register.
func (mr *MockRepositoryInterfaceMockRecorder) Register(ctx, registerData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRepositoryInterface)(nil).Register), ctx, registerData)
}

// Session mocks base method.
func (m *MockRepositoryInterface) Session(ctx context.Context, cookie string) (*models.User, *errors.ErrorObj, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session", ctx, cookie)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(*errors.ErrorObj)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// Session indicates an expected call of Session.
func (mr *MockRepositoryInterfaceMockRecorder) Session(ctx, cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockRepositoryInterface)(nil).Session), ctx, cookie)
}
