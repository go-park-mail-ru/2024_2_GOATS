// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	auth "github.com/go-park-mail-ru/2024_2_GOATS/internal/app/models/auth"

	errors "github.com/go-park-mail-ru/2024_2_GOATS/internal/app/errors"

	mock "github.com/stretchr/testify/mock"

	models "github.com/go-park-mail-ru/2024_2_GOATS/internal/app/models"
)

// RepositoryInterfaceMock is an autogenerated mock type for the RepositoryInterfaceMock type
type RepositoryInterfaceMock struct {
	mock.Mock
}

type RepositoryInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RepositoryInterfaceMock) EXPECT() *RepositoryInterfaceMock_Expecter {
	return &RepositoryInterfaceMock_Expecter{mock: &_m.Mock}
}

// GetCollection provides a mock function with given fields: ctx
func (_m *RepositoryInterfaceMock) GetCollection(ctx context.Context) ([]models.Collection, *errors.ErrorObj, int) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCollection")
	}

	var r0 []models.Collection
	var r1 *errors.ErrorObj
	var r2 int
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Collection, *errors.ErrorObj, int)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Collection); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) *errors.ErrorObj); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.ErrorObj)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) int); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// RepositoryInterfaceMock_GetCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollection'
type RepositoryInterfaceMock_GetCollection_Call struct {
	*mock.Call
}

// GetCollection is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RepositoryInterfaceMock_Expecter) GetCollection(ctx interface{}) *RepositoryInterfaceMock_GetCollection_Call {
	return &RepositoryInterfaceMock_GetCollection_Call{Call: _e.mock.On("GetCollection", ctx)}
}

func (_c *RepositoryInterfaceMock_GetCollection_Call) Run(run func(ctx context.Context)) *RepositoryInterfaceMock_GetCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RepositoryInterfaceMock_GetCollection_Call) Return(_a0 []models.Collection, _a1 *errors.ErrorObj, _a2 int) *RepositoryInterfaceMock_GetCollection_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *RepositoryInterfaceMock_GetCollection_Call) RunAndReturn(run func(context.Context) ([]models.Collection, *errors.ErrorObj, int)) *RepositoryInterfaceMock_GetCollection_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, loginData
func (_m *RepositoryInterfaceMock) Login(ctx context.Context, loginData *auth.LoginData) (*auth.Token, *errors.ErrorObj, int) {
	ret := _m.Called(ctx, loginData)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *auth.Token
	var r1 *errors.ErrorObj
	var r2 int
	if rf, ok := ret.Get(0).(func(context.Context, *auth.LoginData) (*auth.Token, *errors.ErrorObj, int)); ok {
		return rf(ctx, loginData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth.LoginData) *auth.Token); ok {
		r0 = rf(ctx, loginData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth.LoginData) *errors.ErrorObj); ok {
		r1 = rf(ctx, loginData)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.ErrorObj)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *auth.LoginData) int); ok {
		r2 = rf(ctx, loginData)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// RepositoryInterfaceMock_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type RepositoryInterfaceMock_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - loginData *auth.LoginData
func (_e *RepositoryInterfaceMock_Expecter) Login(ctx interface{}, loginData interface{}) *RepositoryInterfaceMock_Login_Call {
	return &RepositoryInterfaceMock_Login_Call{Call: _e.mock.On("Login", ctx, loginData)}
}

func (_c *RepositoryInterfaceMock_Login_Call) Run(run func(ctx context.Context, loginData *auth.LoginData)) *RepositoryInterfaceMock_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*auth.LoginData))
	})
	return _c
}

func (_c *RepositoryInterfaceMock_Login_Call) Return(_a0 *auth.Token, _a1 *errors.ErrorObj, _a2 int) *RepositoryInterfaceMock_Login_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *RepositoryInterfaceMock_Login_Call) RunAndReturn(run func(context.Context, *auth.LoginData) (*auth.Token, *errors.ErrorObj, int)) *RepositoryInterfaceMock_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, registerData
func (_m *RepositoryInterfaceMock) Register(ctx context.Context, registerData *auth.RegisterData) (*auth.Token, *errors.ErrorObj, int) {
	ret := _m.Called(ctx, registerData)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *auth.Token
	var r1 *errors.ErrorObj
	var r2 int
	if rf, ok := ret.Get(0).(func(context.Context, *auth.RegisterData) (*auth.Token, *errors.ErrorObj, int)); ok {
		return rf(ctx, registerData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth.RegisterData) *auth.Token); ok {
		r0 = rf(ctx, registerData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth.RegisterData) *errors.ErrorObj); ok {
		r1 = rf(ctx, registerData)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.ErrorObj)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *auth.RegisterData) int); ok {
		r2 = rf(ctx, registerData)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// RepositoryInterfaceMock_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type RepositoryInterfaceMock_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - registerData *auth.RegisterData
func (_e *RepositoryInterfaceMock_Expecter) Register(ctx interface{}, registerData interface{}) *RepositoryInterfaceMock_Register_Call {
	return &RepositoryInterfaceMock_Register_Call{Call: _e.mock.On("Register", ctx, registerData)}
}

func (_c *RepositoryInterfaceMock_Register_Call) Run(run func(ctx context.Context, registerData *auth.RegisterData)) *RepositoryInterfaceMock_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*auth.RegisterData))
	})
	return _c
}

func (_c *RepositoryInterfaceMock_Register_Call) Return(_a0 *auth.Token, _a1 *errors.ErrorObj, _a2 int) *RepositoryInterfaceMock_Register_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *RepositoryInterfaceMock_Register_Call) RunAndReturn(run func(context.Context, *auth.RegisterData) (*auth.Token, *errors.ErrorObj, int)) *RepositoryInterfaceMock_Register_Call {
	_c.Call.Return(run)
	return _c
}

// Session provides a mock function with given fields: ctx, cookie
func (_m *RepositoryInterfaceMock) Session(ctx context.Context, cookie string) (*models.User, *errors.ErrorObj, int) {
	ret := _m.Called(ctx, cookie)

	if len(ret) == 0 {
		panic("no return value specified for Session")
	}

	var r0 *models.User
	var r1 *errors.ErrorObj
	var r2 int
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, *errors.ErrorObj, int)); ok {
		return rf(ctx, cookie)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, cookie)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *errors.ErrorObj); ok {
		r1 = rf(ctx, cookie)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.ErrorObj)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) int); ok {
		r2 = rf(ctx, cookie)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// RepositoryInterfaceMock_Session_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Session'
type RepositoryInterfaceMock_Session_Call struct {
	*mock.Call
}

// Session is a helper method to define mock.On call
//   - ctx context.Context
//   - cookie string
func (_e *RepositoryInterfaceMock_Expecter) Session(ctx interface{}, cookie interface{}) *RepositoryInterfaceMock_Session_Call {
	return &RepositoryInterfaceMock_Session_Call{Call: _e.mock.On("Session", ctx, cookie)}
}

func (_c *RepositoryInterfaceMock_Session_Call) Run(run func(ctx context.Context, cookie string)) *RepositoryInterfaceMock_Session_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RepositoryInterfaceMock_Session_Call) Return(_a0 *models.User, _a1 *errors.ErrorObj, _a2 int) *RepositoryInterfaceMock_Session_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *RepositoryInterfaceMock_Session_Call) RunAndReturn(run func(context.Context, string) (*models.User, *errors.ErrorObj, int)) *RepositoryInterfaceMock_Session_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepositoryInterfaceMock creates a new instance of RepositoryInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryInterfaceMock {
	mock := &RepositoryInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
