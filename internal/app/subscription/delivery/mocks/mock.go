// Code generated by MockGen. DO NOT EDIT.
// Source: delivery.go

// Package mock_delivery is a generated GoMock package.
package mock_delivery

import (
	context "context"
	reflect "reflect"

	errors "github.com/go-park-mail-ru/2024_2_GOATS/internal/app/errors"
	models "github.com/go-park-mail-ru/2024_2_GOATS/internal/app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockSubscriptionServiceInterface is a mock of SubscriptionServiceInterface interface.
type MockSubscriptionServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionServiceInterfaceMockRecorder
}

// MockSubscriptionServiceInterfaceMockRecorder is the mock recorder for MockSubscriptionServiceInterface.
type MockSubscriptionServiceInterfaceMockRecorder struct {
	mock *MockSubscriptionServiceInterface
}

// NewMockSubscriptionServiceInterface creates a new mock instance.
func NewMockSubscriptionServiceInterface(ctrl *gomock.Controller) *MockSubscriptionServiceInterface {
	mock := &MockSubscriptionServiceInterface{ctrl: ctrl}
	mock.recorder = &MockSubscriptionServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionServiceInterface) EXPECT() *MockSubscriptionServiceInterfaceMockRecorder {
	return m.recorder
}

// Subscribe mocks base method.
func (m *MockSubscriptionServiceInterface) Subscribe(ctx context.Context, data *models.SubscriptionData) (string, *errors.ServiceError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*errors.ServiceError)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubscriptionServiceInterfaceMockRecorder) Subscribe(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubscriptionServiceInterface)(nil).Subscribe), ctx, data)
}
