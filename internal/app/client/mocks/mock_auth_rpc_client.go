// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2024_2_GOATS/auth_service/pkg/auth_v1 (interfaces: SessionRPCClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	__ "github.com/go-park-mail-ru/2024_2_GOATS/auth_service/pkg/auth_v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSessionRPCClient is a mock of SessionRPCClient interface.
type MockSessionRPCClient struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRPCClientMockRecorder
}

// MockSessionRPCClientMockRecorder is the mock recorder for MockSessionRPCClient.
type MockSessionRPCClientMockRecorder struct {
	mock *MockSessionRPCClient
}

// NewMockSessionRPCClient creates a new mock instance.
func NewMockSessionRPCClient(ctrl *gomock.Controller) *MockSessionRPCClient {
	mock := &MockSessionRPCClient{ctrl: ctrl}
	mock.recorder = &MockSessionRPCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionRPCClient) EXPECT() *MockSessionRPCClientMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockSessionRPCClient) CreateSession(arg0 context.Context, arg1 *__.CreateSessionRequest, arg2 ...grpc.CallOption) (*__.CreateSessionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSession", varargs...)
	ret0, _ := ret[0].(*__.CreateSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockSessionRPCClientMockRecorder) CreateSession(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockSessionRPCClient)(nil).CreateSession), varargs...)
}

// DestroySession mocks base method.
func (m *MockSessionRPCClient) DestroySession(arg0 context.Context, arg1 *__.DestroySessionRequest, arg2 ...grpc.CallOption) (*__.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DestroySession", varargs...)
	ret0, _ := ret[0].(*__.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DestroySession indicates an expected call of DestroySession.
func (mr *MockSessionRPCClientMockRecorder) DestroySession(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroySession", reflect.TypeOf((*MockSessionRPCClient)(nil).DestroySession), varargs...)
}

// Session mocks base method.
func (m *MockSessionRPCClient) Session(arg0 context.Context, arg1 *__.GetSessionRequest, arg2 ...grpc.CallOption) (*__.GetSessionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Session", varargs...)
	ret0, _ := ret[0].(*__.GetSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Session indicates an expected call of Session.
func (mr *MockSessionRPCClientMockRecorder) Session(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockSessionRPCClient)(nil).Session), varargs...)
}
