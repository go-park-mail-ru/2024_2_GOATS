// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2024_2_GOATS/user_service/pkg/user_v1 (interfaces: UserRPCClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	__ "github.com/go-park-mail-ru/2024_2_GOATS/user_service/pkg/user_v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockUserRPCClient is a mock of UserRPCClient interface.
type MockUserRPCClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserRPCClientMockRecorder
}

// MockUserRPCClientMockRecorder is the mock recorder for MockUserRPCClient.
type MockUserRPCClientMockRecorder struct {
	mock *MockUserRPCClient
}

// NewMockUserRPCClient creates a new mock instance.
func NewMockUserRPCClient(ctrl *gomock.Controller) *MockUserRPCClient {
	mock := &MockUserRPCClient{ctrl: ctrl}
	mock.recorder = &MockUserRPCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRPCClient) EXPECT() *MockUserRPCClientMockRecorder {
	return m.recorder
}

// CheckFavorite mocks base method.
func (m *MockUserRPCClient) CheckFavorite(arg0 context.Context, arg1 *__.HandleFavorite, arg2 ...grpc.CallOption) (*__.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckFavorite", varargs...)
	ret0, _ := ret[0].(*__.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckFavorite indicates an expected call of CheckFavorite.
func (mr *MockUserRPCClientMockRecorder) CheckFavorite(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFavorite", reflect.TypeOf((*MockUserRPCClient)(nil).CheckFavorite), varargs...)
}

// Create mocks base method.
func (m *MockUserRPCClient) Create(arg0 context.Context, arg1 *__.CreateUserRequest, arg2 ...grpc.CallOption) (*__.ID, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*__.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRPCClientMockRecorder) Create(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRPCClient)(nil).Create), varargs...)
}

// FindByEmail mocks base method.
func (m *MockUserRPCClient) FindByEmail(arg0 context.Context, arg1 *__.Email, arg2 ...grpc.CallOption) (*__.UserData, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByEmail", varargs...)
	ret0, _ := ret[0].(*__.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserRPCClientMockRecorder) FindByEmail(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserRPCClient)(nil).FindByEmail), varargs...)
}

// FindByID mocks base method.
func (m *MockUserRPCClient) FindByID(arg0 context.Context, arg1 *__.ID, arg2 ...grpc.CallOption) (*__.UserData, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByID", varargs...)
	ret0, _ := ret[0].(*__.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockUserRPCClientMockRecorder) FindByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserRPCClient)(nil).FindByID), varargs...)
}

// GetFavorites mocks base method.
func (m *MockUserRPCClient) GetFavorites(arg0 context.Context, arg1 *__.ID, arg2 ...grpc.CallOption) (*__.GetFavoritesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFavorites", varargs...)
	ret0, _ := ret[0].(*__.GetFavoritesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavorites indicates an expected call of GetFavorites.
func (mr *MockUserRPCClientMockRecorder) GetFavorites(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavorites", reflect.TypeOf((*MockUserRPCClient)(nil).GetFavorites), varargs...)
}

// ResetFavorite mocks base method.
func (m *MockUserRPCClient) ResetFavorite(arg0 context.Context, arg1 *__.HandleFavorite, arg2 ...grpc.CallOption) (*__.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetFavorite", varargs...)
	ret0, _ := ret[0].(*__.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetFavorite indicates an expected call of ResetFavorite.
func (mr *MockUserRPCClientMockRecorder) ResetFavorite(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetFavorite", reflect.TypeOf((*MockUserRPCClient)(nil).ResetFavorite), varargs...)
}

// SetFavorite mocks base method.
func (m *MockUserRPCClient) SetFavorite(arg0 context.Context, arg1 *__.HandleFavorite, arg2 ...grpc.CallOption) (*__.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetFavorite", varargs...)
	ret0, _ := ret[0].(*__.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetFavorite indicates an expected call of SetFavorite.
func (mr *MockUserRPCClientMockRecorder) SetFavorite(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFavorite", reflect.TypeOf((*MockUserRPCClient)(nil).SetFavorite), varargs...)
}

// Subscribe mocks base method.
func (m *MockUserRPCClient) Subscribe(arg0 context.Context, arg1 *__.CreateSubscriptionRequest, arg2 ...grpc.CallOption) (*__.SubscriptionID, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(*__.SubscriptionID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockUserRPCClientMockRecorder) Subscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockUserRPCClient)(nil).Subscribe), varargs...)
}

// UpdatePassword mocks base method.
func (m *MockUserRPCClient) UpdatePassword(arg0 context.Context, arg1 *__.UpdatePasswordRequest, arg2 ...grpc.CallOption) (*__.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePassword", varargs...)
	ret0, _ := ret[0].(*__.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUserRPCClientMockRecorder) UpdatePassword(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserRPCClient)(nil).UpdatePassword), varargs...)
}

// UpdateProfile mocks base method.
func (m *MockUserRPCClient) UpdateProfile(arg0 context.Context, arg1 *__.UserData, arg2 ...grpc.CallOption) (*__.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProfile", varargs...)
	ret0, _ := ret[0].(*__.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockUserRPCClientMockRecorder) UpdateProfile(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUserRPCClient)(nil).UpdateProfile), varargs...)
}

// UpdateSubscribtionStatus mocks base method.
func (m *MockUserRPCClient) UpdateSubscribtionStatus(arg0 context.Context, arg1 *__.SubscriptionID, arg2 ...grpc.CallOption) (*__.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSubscribtionStatus", varargs...)
	ret0, _ := ret[0].(*__.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscribtionStatus indicates an expected call of UpdateSubscribtionStatus.
func (mr *MockUserRPCClientMockRecorder) UpdateSubscribtionStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscribtionStatus", reflect.TypeOf((*MockUserRPCClient)(nil).UpdateSubscribtionStatus), varargs...)
}
