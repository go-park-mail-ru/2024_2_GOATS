// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	sql "database/sql"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "email":
			out.Email = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "avatar_url":
			out.AvatarURL = string(in.String())
		case "avatar_name":
			out.AvatarName = string(in.String())
		case "subscription_status":
			out.SubscriptionStatus = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.AvatarURL))
	}
	{
		const prefix string = ",\"avatar_name\":"
		out.RawString(prefix)
		out.String(string(in.AvatarName))
	}
	{
		const prefix string = ",\"subscription_status\":"
		out.RawString(prefix)
		out.Bool(bool(in.SubscriptionStatus))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel1(in *jlexer.Lexer, out *StaffInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "surname":
			out.Surname = string(in.String())
		case "patronymic":
			out.Patronymic = string(in.String())
		case "biography":
			out.Biography = string(in.String())
		case "post":
			out.Post = string(in.String())
		case "birthdate":
			easyjsonC80ae7adDecodeDatabaseSql(in, &out.Birthdate)
		case "small_photo_url":
			out.SmallPhotoURL = string(in.String())
		case "big_photo_url":
			out.BigPhotoURL = string(in.String())
		case "country":
			out.Country = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel1(out *jwriter.Writer, in StaffInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"surname\":"
		out.RawString(prefix)
		out.String(string(in.Surname))
	}
	{
		const prefix string = ",\"patronymic\":"
		out.RawString(prefix)
		out.String(string(in.Patronymic))
	}
	{
		const prefix string = ",\"biography\":"
		out.RawString(prefix)
		out.String(string(in.Biography))
	}
	{
		const prefix string = ",\"post\":"
		out.RawString(prefix)
		out.String(string(in.Post))
	}
	{
		const prefix string = ",\"birthdate\":"
		out.RawString(prefix)
		easyjsonC80ae7adEncodeDatabaseSql(out, in.Birthdate)
	}
	{
		const prefix string = ",\"small_photo_url\":"
		out.RawString(prefix)
		out.String(string(in.SmallPhotoURL))
	}
	{
		const prefix string = ",\"big_photo_url\":"
		out.RawString(prefix)
		out.String(string(in.BigPhotoURL))
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StaffInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StaffInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StaffInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StaffInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel1(l, v)
}
func easyjsonC80ae7adDecodeDatabaseSql(in *jlexer.Lexer, out *sql.NullTime) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "Valid":
			out.Valid = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeDatabaseSql(out *jwriter.Writer, in sql.NullTime) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Time\":"
		out.RawString(prefix[1:])
		out.Raw((in.Time).MarshalJSON())
	}
	{
		const prefix string = ",\"Valid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Valid))
	}
	out.RawByte('}')
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel2(in *jlexer.Lexer, out *SessionRespData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_data":
			(out.UserData).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel2(out *jwriter.Writer, in SessionRespData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_data\":"
		out.RawString(prefix[1:])
		(in.UserData).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SessionRespData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SessionRespData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SessionRespData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SessionRespData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel2(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel3(in *jlexer.Lexer, out *Season) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "season_number":
			out.SeasonNumber = int(in.Int())
		case "episodes":
			if in.IsNull() {
				in.Skip()
				out.Episodes = nil
			} else {
				in.Delim('[')
				if out.Episodes == nil {
					if !in.IsDelim(']') {
						out.Episodes = make([]*Episode, 0, 8)
					} else {
						out.Episodes = []*Episode{}
					}
				} else {
					out.Episodes = (out.Episodes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Episode
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Episode)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Episodes = append(out.Episodes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel3(out *jwriter.Writer, in Season) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"season_number\":"
		out.RawString(prefix[1:])
		out.Int(int(in.SeasonNumber))
	}
	{
		const prefix string = ",\"episodes\":"
		out.RawString(prefix)
		if in.Episodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Episodes {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Season) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Season) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Season) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Season) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel3(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel4(in *jlexer.Lexer, out *RoomState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "time_code":
			out.TimeCode = float64(in.Float64())
		case "movie":
			(out.Movie).UnmarshalEasyJSON(in)
		case "message":
			(out.Message).UnmarshalEasyJSON(in)
		case "duration":
			out.Duration = int(in.Int())
		case "season_now":
			out.SeasonNow = int(in.Int())
		case "episode_now":
			out.EpisodeNow = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel4(out *jwriter.Writer, in RoomState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"time_code\":"
		out.RawString(prefix)
		out.Float64(float64(in.TimeCode))
	}
	{
		const prefix string = ",\"movie\":"
		out.RawString(prefix)
		(in.Movie).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		(in.Message).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Int(int(in.Duration))
	}
	{
		const prefix string = ",\"season_now\":"
		out.RawString(prefix)
		out.Int(int(in.SeasonNow))
	}
	{
		const prefix string = ",\"episode_now\":"
		out.RawString(prefix)
		out.Int(int(in.EpisodeNow))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RoomState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RoomState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RoomState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RoomState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel4(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel5(in *jlexer.Lexer, out *Room) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "movie_service":
			out.Movie = string(in.String())
		case "admin_id":
			out.AdminID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel5(out *jwriter.Writer, in Room) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"movie_service\":"
		out.RawString(prefix)
		out.String(string(in.Movie))
	}
	{
		const prefix string = ",\"admin_id\":"
		out.RawString(prefix)
		out.String(string(in.AdminID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Room) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Room) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Room) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Room) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel5(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel6(in *jlexer.Lexer, out *Msg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "sender":
			out.Sender = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel6(out *jwriter.Writer, in Msg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"sender\":"
		out.RawString(prefix)
		out.String(string(in.Sender))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Msg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Msg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Msg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Msg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel6(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel7(in *jlexer.Lexer, out *MovieInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "short_description":
			out.ShortDescription = string(in.String())
		case "full_description":
			out.FullDescription = string(in.String())
		case "card_url":
			out.CardURL = string(in.String())
		case "album_url":
			out.AlbumURL = string(in.String())
		case "title_url":
			out.TitleURL = string(in.String())
		case "rating":
			out.Rating = float32(in.Float32())
		case "release_date":
			out.ReleaseDate = string(in.String())
		case "movie_type":
			out.MovieType = string(in.String())
		case "country":
			out.Country = string(in.String())
		case "video_url":
			out.VideoURL = string(in.String())
		case "actors_info":
			if in.IsNull() {
				in.Skip()
				out.Actors = nil
			} else {
				in.Delim('[')
				if out.Actors == nil {
					if !in.IsDelim(']') {
						out.Actors = make([]*StaffInfo, 0, 8)
					} else {
						out.Actors = []*StaffInfo{}
					}
				} else {
					out.Actors = (out.Actors)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *StaffInfo
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(StaffInfo)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Actors = append(out.Actors, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "director_info":
			if in.IsNull() {
				in.Skip()
				out.Director = nil
			} else {
				if out.Director == nil {
					out.Director = new(StaffInfo)
				}
				(*out.Director).UnmarshalEasyJSON(in)
			}
		case "seasons":
			if in.IsNull() {
				in.Skip()
				out.Seasons = nil
			} else {
				in.Delim('[')
				if out.Seasons == nil {
					if !in.IsDelim(']') {
						out.Seasons = make([]*Season, 0, 8)
					} else {
						out.Seasons = []*Season{}
					}
				} else {
					out.Seasons = (out.Seasons)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *Season
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(Season)
						}
						(*v5).UnmarshalEasyJSON(in)
					}
					out.Seasons = append(out.Seasons, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_favorite":
			out.IsFavorite = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel7(out *jwriter.Writer, in MovieInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"short_description\":"
		out.RawString(prefix)
		out.String(string(in.ShortDescription))
	}
	{
		const prefix string = ",\"full_description\":"
		out.RawString(prefix)
		out.String(string(in.FullDescription))
	}
	{
		const prefix string = ",\"card_url\":"
		out.RawString(prefix)
		out.String(string(in.CardURL))
	}
	{
		const prefix string = ",\"album_url\":"
		out.RawString(prefix)
		out.String(string(in.AlbumURL))
	}
	{
		const prefix string = ",\"title_url\":"
		out.RawString(prefix)
		out.String(string(in.TitleURL))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float32(float32(in.Rating))
	}
	{
		const prefix string = ",\"release_date\":"
		out.RawString(prefix)
		out.String(string(in.ReleaseDate))
	}
	{
		const prefix string = ",\"movie_type\":"
		out.RawString(prefix)
		out.String(string(in.MovieType))
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	{
		const prefix string = ",\"video_url\":"
		out.RawString(prefix)
		out.String(string(in.VideoURL))
	}
	{
		const prefix string = ",\"actors_info\":"
		out.RawString(prefix)
		if in.Actors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Actors {
				if v6 > 0 {
					out.RawByte(',')
				}
				if v7 == nil {
					out.RawString("null")
				} else {
					(*v7).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"director_info\":"
		out.RawString(prefix)
		if in.Director == nil {
			out.RawString("null")
		} else {
			(*in.Director).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"seasons\":"
		out.RawString(prefix)
		if in.Seasons == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Seasons {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"is_favorite\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsFavorite))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MovieInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MovieInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MovieInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MovieInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel7(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel8(in *jlexer.Lexer, out *Episode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "episode_number":
			out.EpisodeNumber = int(in.Int())
		case "release_date":
			out.ReleaseDate = string(in.String())
		case "rating":
			out.Rating = float32(in.Float32())
		case "preview_url":
			out.PreviewURL = string(in.String())
		case "video_url":
			out.VideoURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel8(out *jwriter.Writer, in Episode) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"episode_number\":"
		out.RawString(prefix)
		out.Int(int(in.EpisodeNumber))
	}
	{
		const prefix string = ",\"release_date\":"
		out.RawString(prefix)
		out.String(string(in.ReleaseDate))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float32(float32(in.Rating))
	}
	{
		const prefix string = ",\"preview_url\":"
		out.RawString(prefix)
		out.String(string(in.PreviewURL))
	}
	{
		const prefix string = ",\"video_url\":"
		out.RawString(prefix)
		out.String(string(in.VideoURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Episode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Episode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Episode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Episode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel8(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel9(in *jlexer.Lexer, out *Action) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "time_code":
			out.TimeCode = float64(in.Float64())
		case "message":
			(out.Message).UnmarshalEasyJSON(in)
		case "movie_id":
			out.MovieID = int(in.Int())
		case "movie":
			(out.Movie).UnmarshalEasyJSON(in)
		case "season_number":
			out.SeasonNow = int(in.Int())
		case "episode_number":
			out.EpisodeNow = int(in.Int())
		case "duration":
			out.Duration = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel9(out *jwriter.Writer, in Action) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"time_code\":"
		out.RawString(prefix)
		out.Float64(float64(in.TimeCode))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		(in.Message).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"movie_id\":"
		out.RawString(prefix)
		out.Int(int(in.MovieID))
	}
	{
		const prefix string = ",\"movie\":"
		out.RawString(prefix)
		(in.Movie).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"season_number\":"
		out.RawString(prefix)
		out.Int(int(in.SeasonNow))
	}
	{
		const prefix string = ",\"episode_number\":"
		out.RawString(prefix)
		out.Int(int(in.EpisodeNow))
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Int(int(in.Duration))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Action) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Action) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Action) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Action) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20242GOATSInternalAppRoomModel9(l, v)
}
