// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package api

import (
	json "encoding/json"
	models "github.com/go-park-mail-ru/2024_2_GOATS/internal/app/models"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "email":
			out.Email = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "avatar_url":
			out.AvatarURL = string(in.String())
		case "subscription_status":
			out.SubscriptionStatus = bool(in.Bool())
		case "subscription_expiration_date":
			out.SubscriptionExpirationDate = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.AvatarURL))
	}
	{
		const prefix string = ",\"subscription_status\":"
		out.RawString(prefix)
		out.Bool(bool(in.SubscriptionStatus))
	}
	{
		const prefix string = ",\"subscription_expiration_date\":"
		out.RawString(prefix)
		out.String(string(in.SubscriptionExpirationDate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi(l, v)
}
func easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi1(in *jlexer.Lexer, out *UpdateProfileRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = int(in.Int())
		case "email":
			out.Email = string(in.String())
		case "username":
			out.Username = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi1(out *jwriter.Writer, in UpdateProfileRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateProfileRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateProfileRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateProfileRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateProfileRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi1(l, v)
}
func easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi2(in *jlexer.Lexer, out *UpdatePasswordRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = int(in.Int())
		case "oldPassword":
			out.OldPassword = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "passwordConfirmation":
			out.PasswordConfirmation = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi2(out *jwriter.Writer, in UpdatePasswordRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"oldPassword\":"
		out.RawString(prefix)
		out.String(string(in.OldPassword))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"passwordConfirmation\":"
		out.RawString(prefix)
		out.String(string(in.PasswordConfirmation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdatePasswordRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdatePasswordRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdatePasswordRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdatePasswordRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi2(l, v)
}
func easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi3(in *jlexer.Lexer, out *SubscriptionStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi3(out *jwriter.Writer, in SubscriptionStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubscriptionStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubscriptionStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubscriptionStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubscriptionStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi3(l, v)
}
func easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi4(in *jlexer.Lexer, out *SubscribeResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "subscription_idp":
			out.SubscriptionIDP = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi4(out *jwriter.Writer, in SubscribeResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"subscription_idp\":"
		out.RawString(prefix[1:])
		out.String(string(in.SubscriptionIDP))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubscribeResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubscribeResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubscribeResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubscribeResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi4(l, v)
}
func easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi5(in *jlexer.Lexer, out *SubscribeRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			out.Amount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi5(out *jwriter.Writer, in SubscribeRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Amount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubscribeRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubscribeRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubscribeRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubscribeRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi5(l, v)
}
func easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi6(in *jlexer.Lexer, out *SessionResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_data":
			(out.UserData).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi6(out *jwriter.Writer, in SessionResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_data\":"
		out.RawString(prefix[1:])
		(in.UserData).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SessionResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SessionResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SessionResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SessionResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi6(l, v)
}
func easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi7(in *jlexer.Lexer, out *RegisterRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "passwordConfirmation":
			out.PasswordConfirmation = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi7(out *jwriter.Writer, in RegisterRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"passwordConfirmation\":"
		out.RawString(prefix)
		out.String(string(in.PasswordConfirmation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RegisterRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RegisterRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RegisterRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RegisterRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi7(l, v)
}
func easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi8(in *jlexer.Lexer, out *PaymentCallback) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "notification_type":
			out.NotificationType = string(in.String())
		case "operation_id":
			out.OperationID = string(in.String())
		case "amount":
			out.Amount = int64(in.Int64())
		case "withdraw_amount":
			out.WithdrawAmount = int64(in.Int64())
		case "currency":
			out.Currency = string(in.String())
		case "date_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateTime).UnmarshalJSON(data))
			}
		case "sender":
			out.Sender = string(in.String())
		case "codepro":
			out.Codepro = bool(in.Bool())
		case "label":
			out.Label = string(in.String())
		case "sha1_hash":
			out.Signature = string(in.String())
		case "unaccepted":
			out.Unaccepted = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi8(out *jwriter.Writer, in PaymentCallback) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"notification_type\":"
		out.RawString(prefix[1:])
		out.String(string(in.NotificationType))
	}
	{
		const prefix string = ",\"operation_id\":"
		out.RawString(prefix)
		out.String(string(in.OperationID))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"withdraw_amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.WithdrawAmount))
	}
	{
		const prefix string = ",\"currency\":"
		out.RawString(prefix)
		out.String(string(in.Currency))
	}
	{
		const prefix string = ",\"date_time\":"
		out.RawString(prefix)
		out.Raw((in.DateTime).MarshalJSON())
	}
	{
		const prefix string = ",\"sender\":"
		out.RawString(prefix)
		out.String(string(in.Sender))
	}
	{
		const prefix string = ",\"codepro\":"
		out.RawString(prefix)
		out.Bool(bool(in.Codepro))
	}
	{
		const prefix string = ",\"label\":"
		out.RawString(prefix)
		out.String(string(in.Label))
	}
	{
		const prefix string = ",\"sha1_hash\":"
		out.RawString(prefix)
		out.String(string(in.Signature))
	}
	{
		const prefix string = ",\"unaccepted\":"
		out.RawString(prefix)
		out.Bool(bool(in.Unaccepted))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentCallback) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentCallback) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentCallback) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentCallback) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi8(l, v)
}
func easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi9(in *jlexer.Lexer, out *MovieShortInfos) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "movies":
			if in.IsNull() {
				in.Skip()
				out.Movies = nil
			} else {
				in.Delim('[')
				if out.Movies == nil {
					if !in.IsDelim(']') {
						out.Movies = make([]models.MovieShortInfo, 0, 0)
					} else {
						out.Movies = []models.MovieShortInfo{}
					}
				} else {
					out.Movies = (out.Movies)[:0]
				}
				for !in.IsDelim(']') {
					var v1 models.MovieShortInfo
					(v1).UnmarshalEasyJSON(in)
					out.Movies = append(out.Movies, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi9(out *jwriter.Writer, in MovieShortInfos) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"movies\":"
		out.RawString(prefix[1:])
		if in.Movies == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Movies {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MovieShortInfos) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MovieShortInfos) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MovieShortInfos) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MovieShortInfos) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi9(l, v)
}
func easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi10(in *jlexer.Lexer, out *MovieSearchList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(MovieSearchList, 0, 0)
			} else {
				*out = MovieSearchList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 MovieSearchData
			(v4).UnmarshalEasyJSON(in)
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi10(out *jwriter.Writer, in MovieSearchList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v MovieSearchList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MovieSearchList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MovieSearchList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MovieSearchList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi10(l, v)
}
func easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi11(in *jlexer.Lexer, out *MovieSearchData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "card_url":
			out.CardURL = string(in.String())
		case "album_url":
			out.AlbumURL = string(in.String())
		case "rating":
			out.Rating = string(in.String())
		case "release_date":
			out.ReleaseDate = string(in.String())
		case "movie_type":
			out.MovieType = string(in.String())
		case "country":
			out.Country = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi11(out *jwriter.Writer, in MovieSearchData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"card_url\":"
		out.RawString(prefix)
		out.String(string(in.CardURL))
	}
	{
		const prefix string = ",\"album_url\":"
		out.RawString(prefix)
		out.String(string(in.AlbumURL))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.String(string(in.Rating))
	}
	{
		const prefix string = ",\"release_date\":"
		out.RawString(prefix)
		out.String(string(in.ReleaseDate))
	}
	{
		const prefix string = ",\"movie_type\":"
		out.RawString(prefix)
		out.String(string(in.MovieType))
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MovieSearchData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MovieSearchData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MovieSearchData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MovieSearchData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi11(l, v)
}
func easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi12(in *jlexer.Lexer, out *MovieResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "movie_info":
			if in.IsNull() {
				in.Skip()
				out.MovieInfo = nil
			} else {
				if out.MovieInfo == nil {
					out.MovieInfo = new(MovieInfo)
				}
				(*out.MovieInfo).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi12(out *jwriter.Writer, in MovieResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"movie_info\":"
		out.RawString(prefix[1:])
		if in.MovieInfo == nil {
			out.RawString("null")
		} else {
			(*in.MovieInfo).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MovieResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MovieResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MovieResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MovieResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi12(l, v)
}
func easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi13(in *jlexer.Lexer, out *MovieInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "full_description":
			out.FullDescription = string(in.String())
		case "short_description":
			out.ShortDescription = string(in.String())
		case "card_url":
			out.CardURL = string(in.String())
		case "album_url":
			out.AlbumURL = string(in.String())
		case "title_url":
			out.TitleURL = string(in.String())
		case "rating":
			out.Rating = float32(in.Float32())
		case "release_date":
			out.ReleaseDate = string(in.String())
		case "movie_type":
			out.MovieType = string(in.String())
		case "country":
			out.Country = string(in.String())
		case "video_url":
			out.VideoURL = string(in.String())
		case "director":
			out.Director = string(in.String())
		case "actors_info":
			if in.IsNull() {
				in.Skip()
				out.Actors = nil
			} else {
				in.Delim('[')
				if out.Actors == nil {
					if !in.IsDelim(']') {
						out.Actors = make([]*ActorInfo, 0, 8)
					} else {
						out.Actors = []*ActorInfo{}
					}
				} else {
					out.Actors = (out.Actors)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *ActorInfo
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(ActorInfo)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.Actors = append(out.Actors, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "seasons":
			if in.IsNull() {
				in.Skip()
				out.Seasons = nil
			} else {
				in.Delim('[')
				if out.Seasons == nil {
					if !in.IsDelim(']') {
						out.Seasons = make([]*models.Season, 0, 8)
					} else {
						out.Seasons = []*models.Season{}
					}
				} else {
					out.Seasons = (out.Seasons)[:0]
				}
				for !in.IsDelim(']') {
					var v8 *models.Season
					if in.IsNull() {
						in.Skip()
						v8 = nil
					} else {
						if v8 == nil {
							v8 = new(models.Season)
						}
						(*v8).UnmarshalEasyJSON(in)
					}
					out.Seasons = append(out.Seasons, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_favorite":
			out.IsFavorite = bool(in.Bool())
		case "with_subscription":
			out.WithSubscription = bool(in.Bool())
		case "rating_user":
			out.RatingUser = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi13(out *jwriter.Writer, in MovieInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"full_description\":"
		out.RawString(prefix)
		out.String(string(in.FullDescription))
	}
	{
		const prefix string = ",\"short_description\":"
		out.RawString(prefix)
		out.String(string(in.ShortDescription))
	}
	{
		const prefix string = ",\"card_url\":"
		out.RawString(prefix)
		out.String(string(in.CardURL))
	}
	{
		const prefix string = ",\"album_url\":"
		out.RawString(prefix)
		out.String(string(in.AlbumURL))
	}
	{
		const prefix string = ",\"title_url\":"
		out.RawString(prefix)
		out.String(string(in.TitleURL))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float32(float32(in.Rating))
	}
	{
		const prefix string = ",\"release_date\":"
		out.RawString(prefix)
		out.String(string(in.ReleaseDate))
	}
	{
		const prefix string = ",\"movie_type\":"
		out.RawString(prefix)
		out.String(string(in.MovieType))
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	{
		const prefix string = ",\"video_url\":"
		out.RawString(prefix)
		out.String(string(in.VideoURL))
	}
	{
		const prefix string = ",\"director\":"
		out.RawString(prefix)
		out.String(string(in.Director))
	}
	{
		const prefix string = ",\"actors_info\":"
		out.RawString(prefix)
		if in.Actors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Actors {
				if v9 > 0 {
					out.RawByte(',')
				}
				if v10 == nil {
					out.RawString("null")
				} else {
					(*v10).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"seasons\":"
		out.RawString(prefix)
		if in.Seasons == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Seasons {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					(*v12).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"is_favorite\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsFavorite))
	}
	{
		const prefix string = ",\"with_subscription\":"
		out.RawString(prefix)
		out.Bool(bool(in.WithSubscription))
	}
	{
		const prefix string = ",\"rating_user\":"
		out.RawString(prefix)
		out.Int64(int64(in.RatingUser))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MovieInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MovieInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MovieInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MovieInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi13(l, v)
}
func easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi14(in *jlexer.Lexer, out *LoginRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi14(out *jwriter.Writer, in LoginRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LoginRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoginRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LoginRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoginRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi14(l, v)
}
func easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi15(in *jlexer.Lexer, out *FavReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = int(in.Int())
		case "movie_id":
			out.MovieID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi15(out *jwriter.Writer, in FavReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"movie_id\":"
		out.RawString(prefix)
		out.Int(int(in.MovieID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FavReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FavReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FavReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FavReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi15(l, v)
}
func easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi16(in *jlexer.Lexer, out *CollectionsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "collections":
			if in.IsNull() {
				in.Skip()
				out.Collections = nil
			} else {
				in.Delim('[')
				if out.Collections == nil {
					if !in.IsDelim(']') {
						out.Collections = make([]Collection, 0, 1)
					} else {
						out.Collections = []Collection{}
					}
				} else {
					out.Collections = (out.Collections)[:0]
				}
				for !in.IsDelim(']') {
					var v13 Collection
					(v13).UnmarshalEasyJSON(in)
					out.Collections = append(out.Collections, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi16(out *jwriter.Writer, in CollectionsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"collections\":"
		out.RawString(prefix[1:])
		if in.Collections == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Collections {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CollectionsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CollectionsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CollectionsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CollectionsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi16(l, v)
}
func easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi17(in *jlexer.Lexer, out *Collection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "movies":
			if in.IsNull() {
				in.Skip()
				out.Movies = nil
			} else {
				in.Delim('[')
				if out.Movies == nil {
					if !in.IsDelim(']') {
						out.Movies = make([]*models.MovieShortInfo, 0, 8)
					} else {
						out.Movies = []*models.MovieShortInfo{}
					}
				} else {
					out.Movies = (out.Movies)[:0]
				}
				for !in.IsDelim(']') {
					var v16 *models.MovieShortInfo
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						if v16 == nil {
							v16 = new(models.MovieShortInfo)
						}
						(*v16).UnmarshalEasyJSON(in)
					}
					out.Movies = append(out.Movies, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi17(out *jwriter.Writer, in Collection) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"movies\":"
		out.RawString(prefix)
		if in.Movies == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Movies {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					(*v18).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Collection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Collection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Collection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Collection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi17(l, v)
}
func easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi18(in *jlexer.Lexer, out *AuthResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi18(out *jwriter.Writer, in AuthResponse) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi18(l, v)
}
func easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi19(in *jlexer.Lexer, out *AddOrUpdateRatingReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rating":
			out.Rating = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi19(out *jwriter.Writer, in AddOrUpdateRatingReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Rating))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddOrUpdateRatingReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddOrUpdateRatingReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddOrUpdateRatingReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddOrUpdateRatingReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi19(l, v)
}
func easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi20(in *jlexer.Lexer, out *ActorSearchList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ActorSearchList, 0, 1)
			} else {
				*out = ActorSearchList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v19 ActorSearchData
			(v19).UnmarshalEasyJSON(in)
			*out = append(*out, v19)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi20(out *jwriter.Writer, in ActorSearchList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v20, v21 := range in {
			if v20 > 0 {
				out.RawByte(',')
			}
			(v21).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ActorSearchList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ActorSearchList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ActorSearchList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ActorSearchList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi20(l, v)
}
func easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi21(in *jlexer.Lexer, out *ActorSearchData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "full_name":
			out.FullName = string(in.String())
		case "photo_url":
			out.PhotoURL = string(in.String())
		case "country":
			out.Country = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi21(out *jwriter.Writer, in ActorSearchData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"full_name\":"
		out.RawString(prefix)
		out.String(string(in.FullName))
	}
	{
		const prefix string = ",\"photo_url\":"
		out.RawString(prefix)
		out.String(string(in.PhotoURL))
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ActorSearchData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ActorSearchData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ActorSearchData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ActorSearchData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi21(l, v)
}
func easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi22(in *jlexer.Lexer, out *ActorResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "actor_info":
			if in.IsNull() {
				in.Skip()
				out.ActorInfo = nil
			} else {
				if out.ActorInfo == nil {
					out.ActorInfo = new(Actor)
				}
				(*out.ActorInfo).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi22(out *jwriter.Writer, in ActorResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"actor_info\":"
		out.RawString(prefix[1:])
		if in.ActorInfo == nil {
			out.RawString("null")
		} else {
			(*in.ActorInfo).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ActorResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ActorResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ActorResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ActorResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi22(l, v)
}
func easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi23(in *jlexer.Lexer, out *ActorInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "full_name":
			out.FullName = string(in.String())
		case "photo_url":
			out.PhotoURL = string(in.String())
		case "country":
			out.Country = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi23(out *jwriter.Writer, in ActorInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"full_name\":"
		out.RawString(prefix)
		out.String(string(in.FullName))
	}
	{
		const prefix string = ",\"photo_url\":"
		out.RawString(prefix)
		out.String(string(in.PhotoURL))
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ActorInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ActorInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ActorInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ActorInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi23(l, v)
}
func easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi24(in *jlexer.Lexer, out *Actor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "full_name":
			out.FullName = string(in.String())
		case "biography":
			out.Biography = string(in.String())
		case "birthdate":
			out.Birthdate = string(in.String())
		case "photo_url":
			out.PhotoURL = string(in.String())
		case "country":
			out.Country = string(in.String())
		case "movies":
			if in.IsNull() {
				in.Skip()
				out.Movies = nil
			} else {
				in.Delim('[')
				if out.Movies == nil {
					if !in.IsDelim(']') {
						out.Movies = make([]*models.MovieShortInfo, 0, 8)
					} else {
						out.Movies = []*models.MovieShortInfo{}
					}
				} else {
					out.Movies = (out.Movies)[:0]
				}
				for !in.IsDelim(']') {
					var v22 *models.MovieShortInfo
					if in.IsNull() {
						in.Skip()
						v22 = nil
					} else {
						if v22 == nil {
							v22 = new(models.MovieShortInfo)
						}
						(*v22).UnmarshalEasyJSON(in)
					}
					out.Movies = append(out.Movies, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi24(out *jwriter.Writer, in Actor) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"full_name\":"
		out.RawString(prefix)
		out.String(string(in.FullName))
	}
	{
		const prefix string = ",\"biography\":"
		out.RawString(prefix)
		out.String(string(in.Biography))
	}
	{
		const prefix string = ",\"birthdate\":"
		out.RawString(prefix)
		out.String(string(in.Birthdate))
	}
	{
		const prefix string = ",\"photo_url\":"
		out.RawString(prefix)
		out.String(string(in.PhotoURL))
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	{
		const prefix string = ",\"movies\":"
		out.RawString(prefix)
		if in.Movies == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Movies {
				if v23 > 0 {
					out.RawByte(',')
				}
				if v24 == nil {
					out.RawString("null")
				} else {
					(*v24).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Actor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Actor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComGoParkMailRu20242GOATSInternalAppApi24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Actor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Actor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComGoParkMailRu20242GOATSInternalAppApi24(l, v)
}
