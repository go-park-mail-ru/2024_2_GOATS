// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
// coverage:ignore
// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	url "net/url"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2024_2_GOATS/internal/app/models"
	auth "github.com/go-park-mail-ru/2024_2_GOATS/internal/app/models/auth"
	gomock "github.com/golang/mock/gomock"
)

// MockMovieImplementationInterface is a mock of MovieImplementationInterface interface.
type MockMovieImplementationInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMovieImplementationInterfaceMockRecorder
}

// MockMovieImplementationInterfaceMockRecorder is the mock recorder for MockMovieImplementationInterface.
type MockMovieImplementationInterfaceMockRecorder struct {
	mock *MockMovieImplementationInterface
}

// NewMockMovieImplementationInterface creates a new mock instance.
func NewMockMovieImplementationInterface(ctrl *gomock.Controller) *MockMovieImplementationInterface {
	mock := &MockMovieImplementationInterface{ctrl: ctrl}
	mock.recorder = &MockMovieImplementationInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieImplementationInterface) EXPECT() *MockMovieImplementationInterfaceMockRecorder {
	return m.recorder
}

// GetCollection mocks base method.
func (m *MockMovieImplementationInterface) GetCollection(ctx context.Context, query url.Values) (*models.CollectionsResponse, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollection", ctx, query)
	ret0, _ := ret[0].(*models.CollectionsResponse)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// GetCollection indicates an expected call of GetCollection.
func (mr *MockMovieImplementationInterfaceMockRecorder) GetCollection(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollection", reflect.TypeOf((*MockMovieImplementationInterface)(nil).GetCollection), ctx, query)
}

// MockAuthImplementationInterface is a mock of AuthImplementationInterface interface.
type MockAuthImplementationInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAuthImplementationInterfaceMockRecorder
}

// MockAuthImplementationInterfaceMockRecorder is the mock recorder for MockAuthImplementationInterface.
type MockAuthImplementationInterfaceMockRecorder struct {
	mock *MockAuthImplementationInterface
}

// NewMockAuthImplementationInterface creates a new mock instance.
func NewMockAuthImplementationInterface(ctrl *gomock.Controller) *MockAuthImplementationInterface {
	mock := &MockAuthImplementationInterface{ctrl: ctrl}
	mock.recorder = &MockAuthImplementationInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthImplementationInterface) EXPECT() *MockAuthImplementationInterfaceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthImplementationInterface) Login(ctx context.Context, loginData *auth.LoginData) (*auth.AuthResponse, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, loginData)
	ret0, _ := ret[0].(*auth.AuthResponse)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthImplementationInterfaceMockRecorder) Login(ctx, loginData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthImplementationInterface)(nil).Login), ctx, loginData)
}

// Logout mocks base method.
func (m *MockAuthImplementationInterface) Logout(ctx context.Context, cookie string) (*auth.AuthResponse, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, cookie)
	ret0, _ := ret[0].(*auth.AuthResponse)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthImplementationInterfaceMockRecorder) Logout(ctx, cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthImplementationInterface)(nil).Logout), ctx, cookie)
}

// Register mocks base method.
func (m *MockAuthImplementationInterface) Register(ctx context.Context, registerData *auth.RegisterData) (*auth.AuthResponse, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, registerData)
	ret0, _ := ret[0].(*auth.AuthResponse)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthImplementationInterfaceMockRecorder) Register(ctx, registerData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthImplementationInterface)(nil).Register), ctx, registerData)
}

// Session mocks base method.
func (m *MockAuthImplementationInterface) Session(ctx context.Context, cookie string) (*auth.SessionResponse, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session", ctx, cookie)
	ret0, _ := ret[0].(*auth.SessionResponse)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// Session indicates an expected call of Session.
func (mr *MockAuthImplementationInterfaceMockRecorder) Session(ctx, cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockAuthImplementationInterface)(nil).Session), ctx, cookie)
}
